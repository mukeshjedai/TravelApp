@page

<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.css" />

<script src="https://cdn.datatables.net/2.0.8/js/dataTables.js"></script>
<script type="text/javascript" src="https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js"></script>
<script src="https://accounts.google.com/gsi/client" async defer></script>


<div style="width: 100%;min-width: 100%; color: white; background-color: #164549; right: 0px;">
    <a href="/"><img width="100px;" src="logo.svg" /></a>
    Australian Citizenship Practice Test
</div>
<div style="position: fixed; top: 20px; right: 20px; background-color: #164549; padding: 5px 10px; color: white; border-radius: 4px;">
    <span>Correct: </span>
    <span id="correctCounter">0</span>
</div>

<div style="position: fixed; top: 60px; right: 20px; background-color: #164549; padding: 5px 10px; color: white; border-radius: 4px;">
    <span>Wrong: </span>
    <span id="wrongCounter">0</span>
</div>

<div id="buttonDiv" style="float:right; "></div>
<div id="welcome">Welcome,</div>
<table id="example" class="display" style="width:100%;" >
    <thead>
    <tr>
        <th  style="background-color: #164549">Question</th>
        <th  style="background-color: #164549">Option 1</th>
        <th  style="background-color: #164549">Option 2</th>
        <th  style="background-color: #164549">Option 3</th>
        <th  style="background-color: #164549">Option 4</th>
    </tr>
    </thead>
    <tbody>
    <tr></tr>
    </tbody>
</table>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var data = JSON.parse(this.responseText);
                var correctCount = 0;
                var wrongCount = 0;

                for (var i = 0; i < data.length; i++) {
                    var tr = document.createElement("tr");
                    var tdQuestion = document.createElement("th");
                    tdQuestion.textContent = data[i].question;
                    tdQuestion.style.backgroundColor = "#164549";
                    tr.appendChild(tdQuestion);

                    // Create hidden answer cell
                    var tdAnswer = document.createElement("td");
                    tdAnswer.textContent = data[i].answer;
                    tdAnswer.style.display = "none"; // Hide the answer cell
                    tr.appendChild(tdAnswer);

                    var selectedIndex = -1; // Initialize to -1 (not found)
                    let rowIndexValue = -1;
                    
                    var options = [data[i].option1, data[i].option2, data[i].option3, data[i].option4];

                    for (var j = 0; j < options.length; j++) {
                        var tdOption = document.createElement("td");
                        var label = document.createElement("label");
                        var input = document.createElement("input");
                        input.type = "radio";
                        input.name = "answer_" + i;
                        input.value = options[j];

                        input.addEventListener("change", function() {
                            
                            var row = this.closest("tr");
                            //row.style.color = "#164549";
                            var correctAnswer = row.querySelector("td:nth-child(2)").textContent -1; // Get answer from hidden cell
                            var allOptions = row.querySelectorAll("input[type=radio]");
                            //console.log(correctAnswer)
                            for (var z = 0; z < allOptions.length; z++) {
                                if (allOptions[z].checked) {
                                    selectedIndex = z // Found the selected radio button
                                    break;
                                }
                            }

                            for (var k = 0; k < allOptions.length; k++) {
                                allOptions[k].disabled = true;
                                var cell = allOptions[k].closest("td");
                                //wronganswers.question_number = i;
                                // Determine the background color for each option
                                if (k === correctAnswer) {
                                    cell.style.backgroundColor = "#28FD93"; // Always green for the correct answer
                                } else if (k === selectedIndex) {
                                    cell.style.backgroundColor = "#ffcdd2";//"#FAECE0"; // Red for the incorrect selected answer
                                } else {
                                    //cell.style.backgroundColor = "#FFFFFF";//"#FAECE0"; // Light green for other unselected options
                                }
                            }

                            const table = document.getElementById("example"); // Get the table element

                            if (selectedIndex  === correctAnswer) {
                                correctCount++;
                                document.getElementById("correctCounter").textContent = correctCount;
                            }else {
                                wrongCount++;
                                console.log(this.name.replace("answer_",""));
                                logRowIndex(this.name.replace("answer_",""));

                                document.getElementById("wrongCounter").textContent = wrongCount;
                            }
                        });

                        label.textContent = options[j];
                        label.insertBefore(input, label.firstChild);
                        tdOption.appendChild(label);
                        tr.appendChild(tdOption);
                    }

                    function logRowIndex(data) {
                    
                    
                    

                        let wronganswers = {
                            email:getCookie("australiancitizenshiptest"),
                            question_number: (parseInt(data, 10) + 1).toString()
                        };

                        console.log(wronganswers);

                        if (1){
                            const url = "/api/Wronganswer/postwronganswer"; // Adjusted endpoint to remove query parameters
                            var xhttp = new XMLHttpRequest();
                            xhttp.open("POST", url, false);
                            xhttp.setRequestHeader("Content-type", "application/json");
                            xhttp.send(JSON.stringify(wronganswers)); // Pass data as JSON in the request body
                        }

                    }

                    document.getElementById("example").getElementsByTagName("tbody")[0].appendChild(tr);
                }
            }
        };

        xhttp.open("GET", "/api/Topics", true);
        xhttp.setRequestHeader("Content-type", "application/json");
        xhttp.send();
    });
</script>

<script>

    function generateSessionId() {
        let sessionId = sessionStorage.getItem('sessionId');

        if (!sessionId) {
            sessionId = crypto.randomUUID(); // Modern approach for secure IDs
            sessionStorage.setItem('sessionId', sessionId);
        }

        //console.log(sessionId);

        return sessionId;
    }
    
    $(document).ready(function() {
        console.log("cookie found"+getCookie("australiancitizenshiptest"));
        var useremail = getCookie("australiancitizenshiptest");
        
        document.getElementById("welcome").textContent =  "Welcome, "+getCookie("australiancitizenshiptest");
        if (useremail != undefined)
        {
            if (useremail.indexOf("gmail")){
                document.getElementById("buttonDiv").hidden = true;
            }
        }
        

        var generatedSessionIdString = generateSessionId().toString(); // Convert to string if needed
        if(getCookie("australiancitizenshiptest") === undefined)
        {
            setCookie("australiancitizenshiptest",sessionStorage.getItem('email') === null ? generateSessionId().toString() : sessionStorage.getItem('email'));

        }else{
            //console.log(getCookie("australiancitizenshiptest"));
        }
        
        let table  = new DataTable('#example',{
            "language": {
                "paginate": {
                    "previous": "",
                    "next": "Next Question"
                }
            },
            paging: true,
            pageLength: 1,
            ordering: false,
            info: false,
            searching: false,
            lengthChange: false,
            "columnDefs": [
                { "targets": [1], "visible": false }
            ]
        });
    });


</script>
<script>
   

 
    window.onload = function () {
        google.accounts.id.initialize({
            client_id: "745450333592-sd40jf6r1uqflv5sgtse93bcnovdqm8q.apps.googleusercontent.com",
            callback: handleCredentialResponse
        });
        google.accounts.id.renderButton(
            document.getElementById("buttonDiv"),
            { theme: "outline", size: "large" }  // customization attributes
        );
        google.accounts.id.prompt(); // also display the One Tap dialog
    }
    // Creating and Setting a Cookie
    function setCookie(name, value, daysToExpire) {
        const expirationDate = new Date();
        expirationDate.setTime(expirationDate.getTime() + (daysToExpire * 24 * 60 * 60 * 1000));
        let expires = "expires="+ expirationDate.toUTCString();
        document.cookie = name + "=" + value + ";" + expires + ";path=/"; // Set path to '/' for site-wide access
    }

    // Reading a Cookie
    function getCookie(name) {
        let matches = document.cookie.match(new RegExp(
            "(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"
        ));
        return matches ? decodeURIComponent(matches[1]) : undefined;
    }
    


    async function handleCredentialResponse(response) {
    
        
        //console.log("Encoded JWT ID token: " + response.credential);

        //document.getElementById("buttonDiv").style.visibility = 'hidden';
       // document.getElementById("signoutDiv").textContent = sessionStorage.getItem("email");
        //document.getElementById("signoutDiv").style.visibility = 'visible';
        try {
            // 1. Decode the JWT token 
            const base64Url = response.credential.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            const decodedToken = JSON.parse(jsonPayload);

 
            // 2. Extract relevant profile information
            const profile = {
                name: decodedToken.name,
                email: decodedToken.email,
                picture: decodedToken.picture,
                // Add other fields you need (e.g., given_name, family_name)
            };

            if (true) {
                console.log("before setting cookie"+getCookie("australiancitizenshiptest"));
                setCookie("australiancitizenshiptest", sessionStorage.getItem('email'));
                console.log("after setting cookie"+getCookie("australiancitizenshiptest"));

            }
            
            //console.log(getCookie("australiancitizenshiptest"));



            const url = "/api/User/register"; // Adjusted endpoint to remove query parameters
            //console.log("calling user registration"+profile.email);
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", url, true);
            xhttp.setRequestHeader("Content-type", "application/json");
            xhttp.send(JSON.stringify(profile)); // Pass data as JSON in the request body


            const emailToSend = profile.email; // Assuming 'profile' is an object with an 'email' property




            // 3. Print the profile (or use it in your application)
            //console.log("User Profile:", profile);


            sessionStorage.setItem('name', profile.name);
            sessionStorage.setItem('email', profile.email);

            //console.log(sessionStorage.getItem('name'));
            //console.log(sessionStorage.getItem('email'));

            // Optionally, display the profile in your UI (replace with your actual UI logic)
            // document.getElementById('profile-name').textContent = profile.name;
            // document.getElementById('profile-email').textContent = profile.email;
            // document.getElementById('profile-picture').src = profile.picture;

        } catch (error) {
            //console.error("Error decoding ID token:", error);
        }
    }




</script>


<style>
    th {
        background-color: #00638f;
        color: #fff;
        padding: 10px;
    }

    tr {
        background-color: #f2f2f2;
        color: #164549;
        padding: 10px;
    }

    input[type=radio] {
        margin-right: 10px;
    }
</style>
