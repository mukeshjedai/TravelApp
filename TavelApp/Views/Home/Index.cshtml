@page

<script type="text/javascript" src="https://code.jquery.com/jquery-3.5.1.js"></script>
<script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
<link rel="stylesheet" href="https://cdn.datatables.net/2.0.8/css/dataTables.dataTables.css" />

<script src="https://cdn.datatables.net/2.0.8/js/dataTables.js"></script>


<table id="example" class="display" style="width:100%;" >
    <thead>
    <tr>
        <th  style="background-color: #164549">Question</th>
        <th  style="background-color: #164549">Option 1</th>
        <th  style="background-color: #164549">Option 2</th>
        <th  style="background-color: #164549">Option 3</th>
        <th  style="background-color: #164549">Option 4</th>
    </tr>
    </thead>
    <tbody>
    <tr></tr>
    </tbody>
</table>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        var xhttp = new XMLHttpRequest();
        xhttp.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var data = JSON.parse(this.responseText);
                var correctCount = 0;
                var wrongCount = 0;

                for (var i = 0; i < data.length; i++) {
                    var tr = document.createElement("tr");
                    var tdQuestion = document.createElement("th");
                    tdQuestion.textContent = data[i].question;
                    tdQuestion.style.backgroundColor = "#164549";
                    tr.appendChild(tdQuestion);

                    // Create hidden answer cell
                    var tdAnswer = document.createElement("td");
                    tdAnswer.textContent = data[i].answer;
                    tdAnswer.style.display = "none"; // Hide the answer cell
                    tr.appendChild(tdAnswer);

                    var options = [data[i].option1, data[i].option2, data[i].option3, data[i].option4];

                    for (var j = 0; j < options.length; j++) {
                        var tdOption = document.createElement("td");
                        var label = document.createElement("label");
                        var input = document.createElement("input");
                        input.type = "radio";
                        input.name = "answer_" + i;
                        input.value = options[j];

                        input.addEventListener("change", function() {
                            
                            var row = this.closest("tr");
                            //row.style.color = "#164549";
                            var correctAnswer = row.querySelector("td:nth-child(2)").textContent -1; // Get answer from hidden cell
                            var allOptions = row.querySelectorAll("input[type=radio]");
                            //console.log(correctAnswer)
                            var selectedIndex = -1; // Initialize to -1 (not found)
                            for (var i = 0; i < allOptions.length; i++) {
                                if (allOptions[i].checked) {
                                    selectedIndex = i; // Found the selected radio button
                                    break;
                                }
                            }

                            for (var k = 0; k < allOptions.length; k++) {
                                allOptions[k].disabled = true;
                                var cell = allOptions[k].closest("td");

                                // Determine the background color for each option
                                if (k === correctAnswer) {
                                    cell.style.backgroundColor = "#28FD93"; // Always green for the correct answer
                                } else if (k === selectedIndex) {
                                    cell.style.backgroundColor = "#ffcdd2";//"#FAECE0"; // Red for the incorrect selected answer
                                } else {
                                    //cell.style.backgroundColor = "#FFFFFF";//"#FAECE0"; // Light green for other unselected options
                                }
                            }



                            if (selectedIndex  === correctAnswer) {
                                correctCount++;
                                document.getElementById("correctCounter").textContent = correctCount;
                            }else {
                                wrongCount++;
                                document.getElementById("wrongCounter").textContent = wrongCount;
                            }
                        });

                        label.textContent = options[j];
                        label.insertBefore(input, label.firstChild);
                        tdOption.appendChild(label);
                        tr.appendChild(tdOption);
                    }

                    document.getElementById("example").getElementsByTagName("tbody")[0].appendChild(tr);
                }
            }
        };

        xhttp.open("GET", "/api/Topics", true);
        xhttp.setRequestHeader("Content-type", "application/json");
        xhttp.send();
    });
</script>

<script>
    
    $(document).ready(function() {
        
        let table  = new DataTable('#example',{
            "language": {
                "paginate": {
                    "previous": "",
                    "next": "Next Question"
                }
            },
            paging: true,
            pageLength: 1,
            ordering: false,
            info: false,
            searching: false,
            lengthChange: false,
            "columnDefs": [
                { "targets": [1], "visible": false }
            ]
        });
    });

</script>
<script>
    async function handleCredentialResponse(response) {
        console.log("Encoded JWT ID token: " + response.credential);

        try {
            // 1. Decode the JWT token 
            const base64Url = response.credential.split('.')[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
                return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
            }).join(''));

            const decodedToken = JSON.parse(jsonPayload);


            // 2. Extract relevant profile information
            const profile = {
                name: decodedToken.name,
                email: decodedToken.email,
                picture: decodedToken.picture,
                // Add other fields you need (e.g., given_name, family_name)
            };
            

            const url = "/api/User/register"; // Adjusted endpoint to remove query parameters
            console.log("calling user registration"+profile.email);
            var xhttp = new XMLHttpRequest();
            xhttp.open("POST", url, true);
            xhttp.setRequestHeader("Content-type", "application/json");
            xhttp.send(JSON.stringify(profile)); // Pass data as JSON in the request body


            const emailToSend = profile.email; // Assuming 'profile' is an object with an 'email' property

            fetch('/api/User/GetUser?email=' + encodeURIComponent(emailToSend))
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.json(); // Parse JSON response (adjust if not JSON)
                })
                .then(userData => {
                    // Handle the retrieved user data (e.g., display on the page)
                    console.log("Retrieved user:", userData);
                })
                .catch(error => {
                    // Handle errors gracefully
                    console.error('Error fetching user:', error);
                    // Optionally, display an error message to the user
                });


            // 3. Print the profile (or use it in your application)
            console.log("User Profile:", profile);

            // Optionally, display the profile in your UI (replace with your actual UI logic)
            // document.getElementById('profile-name').textContent = profile.name;
            // document.getElementById('profile-email').textContent = profile.email;
            // document.getElementById('profile-picture').src = profile.picture;

        } catch (error) {
            console.error("Error decoding ID token:", error);
        }
    }

    window.onload = function () {
        google.accounts.id.initialize({
            client_id: "745450333592-sd40jf6r1uqflv5sgtse93bcnovdqm8q.apps.googleusercontent.com",
            callback: handleCredentialResponse
        });
        google.accounts.id.renderButton(
            document.getElementById("buttonDiv"),
            { theme: "outline", size: "large" }  // customization attributes
        );
        google.accounts.id.prompt(); // also display the One Tap dialog
    }
</script>
<script>
    function signOut() {
        var auth2 = gapi.auth2.getAuthInstance();
        auth2.signOut().then(function () {
            console.log('User signed out.');
        });
    }
</script>


<style>
    th {
        background-color: #00638f;
        color: #fff;
        padding: 10px;
    }

    tr {
        background-color: #f2f2f2;
        color: #164549;
        padding: 10px;
    }

    input[type=radio] {
        margin-right: 10px;
    }
</style>
